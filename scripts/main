#!/usr/local/bin/node --use_strict
"use strict";

const child_process = require('child_process');
const fs = require('fs');
const readline = require('readline');

const delimiter = 'BREAK';

const dumpParts = (parts, rows) => {
  for (const part in parts) {
    parts[part].map((row) => {
      row.dependencies = {};
      Array.from(row.decomposition).map((character) => {
        const data = rows[character];
        if (data) {
          row.dependencies[character] =
              `${data.pinyin.join(', ')} - ${data.definition}`;
        }
      });
    });
    const writer = fs.createWriteStream(`public/characters/part-${part}.txt`);
    writer.write(JSON.stringify(parts[part]));
    writer.end();
  }
}

const callback = () => {
  const input = fs.createReadStream('makemeahanzi.txt');
  const reader = readline.createInterface({input: input});
  const parts = {};
  const rows = {};
  reader.on('line', (line) => {
    const pieces = line.trim().split(delimiter)
    if (pieces.length !== 2) throw new Error(line);
    const row = JSON.parse(pieces[0]);
    const row2 = JSON.parse(pieces[1]);
    for (let key in row2) {
      row[key] = row2[key];
    }
    delete row.normalized_medians;

    const part = Math.floor(row.character.charCodeAt(0) / 256);
    parts[part] = parts[part] || [];
    parts[part].push(row);
    rows[row.character] = row;
  });
  reader.on('close', () => {
    dumpParts(parts, rows);
    child_process.exec('rm makemeahanzi.txt', () => 0);
  });
}

const main = () => {
  // TODO(skishore): This whole function is a terrible hack!
  const spacers = [];
  Array.from(delimiter).slice(1).map((x) => spacers.push('/dev/null'));
  const spacer = spacers.join(' ');
  child_process.exec(`paste -d ${delimiter} makemeahanzi/dictionary.txt ` +
                     `${spacer} makemeahanzi/graphics.txt > makemeahanzi.txt`,
                     (error, stdout, stderr) => {
    if (error != null) throw new Error(error);
    callback();
  });
}

main();
