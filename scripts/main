#!/usr/local/bin/node --use_strict
"use strict";

const child_process = require('child_process');
const fs = require('fs');
const readline = require('readline');

const kDelimiter = 'BREAK';

const dumpParts = (parts, rows) => {
  for (const part in parts) {
    parts[part].map((row) => {
      row.dependencies = {};
      Array.from(row.decomposition).map((character) => {
        const data = rows[character];
        if (data) {
          row.dependencies[character] =
              `${data.pinyin.join(', ')} - ${data.definition}`;
        }
      });
    });
    const data = JSON.stringify(parts[part]);
    fs.writeFileSync(`public/characters/part-${part}.txt`, data);
  }
}

const parseLine = (line, delimiter) => {
  const pieces = line.trim().split(delimiter)
  if (pieces.length !== 2) throw new Error(line);
  const row = JSON.parse(pieces[0]);
  const row2 = JSON.parse(pieces[1]);
  for (let key in row2) {
    row[key] = row2[key];
  }
  delete row.normalized_medians;
  return row;
}

const main = () => {
  // TODO(skishore): This whole function is a terrible hack! Clean it up.

  // Combine each line of the dictionary.txt and graphics.txt files.
  const spacers = [];
  Array.from(kDelimiter).slice(1).map((x) => spacers.push('/dev/null'));
  const spacer = spacers.join(' ');
  console.log('Preparing...');
  child_process.execSync(
      `paste -d ${kDelimiter} makemeahanzi/dictionary.txt ` +
      `${spacer} makemeahanzi/graphics.txt > makemeahanzi.txt`);

  // Read in the combined-file line-by-line into memory.
  console.log('Reading...');
  const input = fs.createReadStream('makemeahanzi.txt');
  const reader = readline.createInterface({input: input});
  const parts = {};
  const rows = {};
  const all = [];
  reader.on('line', (line) => {
    const row = parseLine(line, kDelimiter);
    const part = Math.floor(row.character.charCodeAt(0) / 256);
    parts[part] = parts[part] || [];
    parts[part].push(row);
    rows[row.character] = row;
    all.push(row.character);
  });

  // Dump each part into a characters/part-xxx file, then compress them all.
  reader.on('close', () => {
    console.log('Dumping...');
    dumpParts(parts, rows);
    fs.writeFileSync('all.txt', all.join(''));
    console.log('Compressing...');
    child_process.execSync('rm -f public/characters/*.gz');
    child_process.execSync('gzip --best public/characters/*', () => 0);
    child_process.execSync(
        'for f in public/characters/*.txt.gz; do mv $f ${f}.asset; done',
        () => 0);
    console.log('Cleaning up...');
    child_process.execSync('rm makemeahanzi.txt', () => 0);
    child_process.execSync('mv all.txt public/characters/all.txt', () => 0);
    console.log('Done!');
  });
}

main();
