#!/usr/local/bin/node
"use strict";

const fs = require('fs');
const readline = require('readline');

const match = require('./matcher');

const util = {
  add: (point1, point2) => [point1[0] + point2[0], point1[1] + point2[1]],
  subtract: (point1, point2) => [point1[0] - point2[0], point1[1] - point2[1]],
};

const mapToSquare = (median) => {
  return median.map((x) => [x[0], 900 - x[1]]);
}

const encode = (matcher, row) => {
  const result = [];
  // TODO(skishore): Figure out how to properly decode UTF-8 or -16 in
  // Javascript and then use one of those encodings here instead of this hack.
  const codepoint = row.character.charCodeAt(0);
  result.push(codepoint & 0xff);
  result.push(codepoint >> 8);
  // Push the medians into the binary representation.
  const medians = row.medians.map(mapToSquare);
  const preprocessed = matcher.preprocess(medians);
  result.push(preprocessed.length);
  preprocessed.map((median) => {
    result.push(median.length);
    median.map((x) => result.push(x));
  });
  result.map((x) => { if (!(0 <= x && x < 256)) throw preprocessed; });
  return new Buffer(result);
}

const dumpParts = (parts) => {
  for (const part in parts) {
    const writer = fs.createWriteStream(`data/part-${part}.txt`);
    writer.write(JSON.stringify(parts[part]));
    writer.end();
  }
}

const main = () => {
  const input = fs.createReadStream('makemeahanzi.txt');
  const reader = readline.createInterface({input: input});
  const writer = fs.createWriteStream('medians.bin');
  const matcher = new match.Matcher([]);
  const parts = {};
  reader.on('line', (line) => {
    const row = JSON.parse(line.trim());
    writer.write(encode(matcher, row));
    const part = Math.floor(row.character.charCodeAt(0) / 256);
    parts[part] = parts[part] || [];
    parts[part].push(row);
  });
  reader.on('close', () => {
    writer.end();
    dumpParts(parts);
  });
}

main();
